package testMovieNight.controllers;

import org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import testMovieNight.OmdbConnection;
import testMovieNight.entities.Movie;
//import testMovieNight.repositories.MovieRepository;
import testMovieNight.repositories.MovieRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.ArrayList;
import java.util.List;


@Controller    // This means that this class is a Controller
@RequestMapping(path="/search") // This means URL's start with /demo (after Application path)
public class MovieController {
    @Autowired // This means to get the bean called movieRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private MovieRepository movieRepository;
    private OmdbConnection omdbConnection = new OmdbConnection();

    public MovieController(MovieRepository movieRepository) {
        this.movieRepository = movieRepository;
    }
    public MovieController(){
    }

    @GetMapping(path="/add")
    public @ResponseBody ResponseEntity <Movie>  addNewMovie(@RequestParam String id){
        Movie m = movieRepository.findById(id);
        if(m != null){
            return new ResponseEntity<>(m,HttpStatus.OK);
        }

            m = omdbConnection.getMoviesById(id);
        if(m==null) {
            return new ResponseEntity<>(m, HttpStatus.BAD_REQUEST);
        }
        movieRepository.save(m);
        return new ResponseEntity<>(m, HttpStatus.OK);
    }

    @GetMapping(path="/all")
    public @ResponseBody ResponseEntity<Iterable<Movie>> getAllMovies() {
        // This returns a JSON or XML with the users
        return new ResponseEntity<>(movieRepository.findAll(), HttpStatus.OK);
    }
    @GetMapping(path="/byTitle")
    public @ResponseBody
    ResponseEntity <List<Movie>> showMoviesByTitle(@RequestParam String title){
        List<Movie> movieList = new ArrayList<>();
        try {
            movieList = omdbConnection.getMoviesByName(title);
        }catch (Exception e){
            System.out.println(e);
        }
        if(movieList==null){
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }

        return new ResponseEntity<>(movieList, HttpStatus.OK);
    }

}